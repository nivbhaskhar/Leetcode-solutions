1047. Remove All Adjacent Duplicates In String


Given a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.

We repeatedly make duplicate removals on S until we no longer can.

Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.


abbaca -> a[bb]aca = aaca -> [aa]ca = ca

Idea : Stack [*] (* - some extraneous element)
       Keep putting string characters into stack
       If they match with stack's top, delete both
       Remove "*"


[*]
[*a]
[*ab]
[*a--bb--] = [*a]
[*--aa--]=[*]
[*c]
[*ca]

ca

Pseudocode
-----------
s = stack([''])
for character in S:
   if character == top of s:
      pop stack
   else
     push(character,s)

return ''.join(s)

Complexity analysis
-------------------
O(len(S))





       

