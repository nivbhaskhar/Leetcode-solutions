314. Binary Tree Vertical Order Traversal

Problem:
https://leetcode.com/problems/binary-tree-vertical-order-traversal/description/


Idea:
col of root  = 0
col of 1st level = -1, 1


col positions


	  0
     -1      1
  -2      0     2
-3   -1      1    3


left child = current col -1
right child = current col + 1

level d : min col = -d, max col = d

do a BFS [left child first then right child]

in queue, add (node, its col)

keep a default dict {col: [..]}

when you explore a vertex, add its value to its col..

also track max depth of tree

when printing, print lists from col number = -max depth to col number = max depth


further check:

if fact, no need to try -max depth to max depth

rather if you keep track of max col and min col --> claim is that everything between max and min col
works, i.e has values


why ?

given we have a node N at col c, and say c < max col C

show there's a value at c+1


case 1:
N is root - so if max col C>0, only way to get it is N has a right child, which will be at c+1 col, done

case 2:
N is a left child of M 

so M will be in col c+1

case 3:
N is a right child of M 


max depth, max col C node

trace its path to root

C ------> 0

will cross all integers from C to 0

similarly look at max depth, min col node c 

trace its path to root
will cross all integers from c to 0


---

Can also do DFS to get row, col of a node 


