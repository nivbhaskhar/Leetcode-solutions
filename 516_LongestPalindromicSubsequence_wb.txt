516. Longest Palindromic Subsequence

Problem:
https://leetcode.com/problems/longest-palindromic-subsequence/


Modified approach:

f(a,b) = longest palindromic subseq length in arr[a:b+1]
f(invalid tuples a>b) = 0

find f(0,n-1), where arr length is n


Base case:

a = b:
f(a,b) = 1

b > a:

(see initial approach below for how I first got sidetracked into a more complicated recursion set up)

if arr[a] == arr[b]:
   we can either have the palindrome start and end with positions a, b in which case it is 2 + f(a+1, b-1)
   we can skip position a -- f(a+1,b)
   we can skip position b -- f(a,b-1)

   so it is max(2+f(a+1,b-1), f(a+1,b), f(a,b-1))

   but thinking more, why would we skip position a and keep position b / skip position b and keep position a ?
   eg:  if string[a:b+1] looks like c*****c, there's no advantage in making a palindrome subsequence from c****** or *******c
   it will not be better than making a palindrome subsequence from c[subseq ****]c

   so in fact, if arr[a] == arr[b], the max will be 2+f(a+1,b-1)

if arr[a] != arr[b]:
   we can skip position a -- f(a+1,b)
   we can skip position b -- f(a,b-1)

   so it is max(f(a+1,b), f(a,b-1))


         b-1  b 
a         *   ??
a+1       *   *

Dependency of f(a,b) (?) is on the *s f(a,b-1), f(a+1,b), f(a+1,b-1)

So it makes sense to compute f(., b) for b from 0 to n-1 [ie. column by column]
and to compute f(., b), vary . from b to 0

i.e. fill column from bottom







Initial approach: 

f(a,b) = longest palindromic subseq length in arr[a:b+1]

f(invalid tuples a>b) = 0

* I got sidetracked into this approach because I set up the recursion of f(a,b) in a convoluted way

g(a,b) = smallest integer b>= x >= a so that arr[b] == arr[x] 



find f(0,n-1), where arr length is n


Base case:

a=b
f(a,b) = 1



b >= a+1

f(a,b) = 

* convoluted recursion
if g(a,b) == b:
   m = max(1, f(a,b-1)) # arr[b] is in palindrome, vs is not
else:
   max(2+ f(g(a,b)+1, b-1), f(a,b-1)) # arr[b] is in palindrome vs is not


actually, even the case a=b, can be clubbed into the next one.
since g(a,b) = b if a=b,  and m = max(1, f(b,b-1)) = max(1,0) = 1









              b-1, b


a              *  ??


g(a,b)+1       *  



 0 1 2 . . n-3 n-2 n-1
0 .
1   .
2
.
.
n-3           .             
n-2             .
n-1               .


direction : loop b from 0 to n-1 and a from 0 to b
i.e fill up the above table column by column going for top to bottom of column



to compute entries f(*, b), you only need entries for f(*, b-1)
so just save {a: f(a,b-1)} after computing f(*,b-1) and use it when computing f(*,b)


to compute g(a,b) --> precompute for each character, the list of positions in which it occurs
this is an ordered list, and you want the least integer x so that x>= a and <=b
this can be done in log n time, n = length of ordered list by binary searching
python's bisect_left actually works here 

overall time complexity is O(n^2 log n) -> for looking at (a,b) --> n^2 and inside each (a,b) --> log n time to compute g(a,b)
and O(1) time to do other updates

space complexity is O(n) --> need to store 2 dictionaries {a: f(a,b-1)}, {a: f(a,b)} at each point of time


